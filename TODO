RECENTLY DONE:
- Updated some documentation
- Send Tammy the Documentation.


TODO LIST
=================================================
- Allow them to specify command.
- take a look at CFG code base
    * what would it take to run it on LC, give it a try.
- Start providing support for larger MPI files: /g/g0/pascal/lulesh/lulesh_ravel_traces
    * Support actual render, make sure it can handle the data render.
- Labels -> instead of the cali key, try specifying the field based on the last sorted field on the spot 2 page.
- Integration: send cali file run IDs.  this specifies which ravel trace to use by the cali file name.
    * This Integration won't be possible until we have those files in the proper location with the right cali filenames.
    * After that, I should be able to just pass in the location of the file with absolute directories: /g/g0/pascal/lulesh/lulesh_ravel_traces/xxxxx.cali
- Error message: “If you don’t have an account on [whatever the specified machine was], try picking a machine you have access to, like [the current URL]&machine=rzslic,” essentially debugging messages. Low priority, but useful.
- Host on Both RZ and CZ.
- Group By.
- Find a way to do in-order sorting.
    * Investigate: Is there an option for this?
    * Can we specify a sort function?
- Icons
- tooltip suggestion from Tammy Dahlgren
- Custom X-axis titles.



https://lc.llnl.gov/spot/dcvis/web/?sf=/usr/gapps/spot/datasets/lulesh2small&layout=/usr/gapps/spot/datasets/enhanced_layout.json
            var maximal = '/usr/gapps/wf/web/spot/data/lulesh_maximal/';




DONE
1.  Genericize the CallSpot.js so it can be used in any project
2.  Enable usage of CallSpot.js from new dur_sankey along with the parameters.
3.  Construct STUB data from CallSpot: spot.py durations2 <filepath1.cali> [filepath2.cali]*
4.  Get dur_sankey working with the STUB data.
5.  Get dur_sankey working for any filepathX.cali
6.  Make Spot 2 compare button and extract all runIDs/filepathX.cali
7.  Integrate Spot 2 cali extraction with the new dur_sankey project page.
8.  Ravel with new API integration, now able to make post request ad handle response, use response to show graph.

RECENTLY DONE:
- Allow the person to specify an Endpoint to call, an input box for dan laney.
- Fixed Title overlapping Graph Bug.
- A few minor error message modifications.

RAVEL:
- Pass cali_key to ravel page and prep it to be sent to BE.
- First pass of reductionSplicer which reduces the events and messages to a certain step index for example 0 - 100.


Future features:
1. Allow user to specify columns with some UI widget
2. Chart overlap issue
3. Ability to overwrite column names on table (aliases)




lulesh_x27_ravel.js   lulesh_x27_ravel.json lulesh_x8_ravel.js
aschwanden1@doc ~/Downloads: pwd
/Users/aschwanden1/Downloads
aschwanden1@doc ~/Downloads:





Error reporting feature:
 was helping Dan Laney through using the Spot 2.0 page, I started him at this URL

https://lc.llnl.gov/spot/dcvis/web/?sf=/usr/gapps/spot/datasets/lulesh2small&layout=/usr/gapps/spot/datasets/enhanced_layout.json

First he got the “log in to the RZ” message, which confuses people, while still being a good error message. It would be nice if we could have an RZ and a CZ hosting.

Then he got a “Lorenz Error, failed to run command…” message, which came from him not having an account on Genie. This was easily solvable, but it might be nice to add warnings like
“If you don’t have an account on [whatever the specified machine was], try picking a machine you have access to, like [the current URL]&machine=rzslic,” essentially debugging messages. Low priority, but useful.

Also really nice work on the error messages, it was possible to talk Dan through a session over Jabber pretty easily, that’s paying dividends.

Best,

David P

----------------------------
HSTS error:
if you write in browser "this is safe" then it will let you get past the HSTS error.

